/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef lease_service_TYPES_H
#define lease_service_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace mmux { namespace directory {

class rpc_lease_ack;

class lease_service_exception;


class rpc_lease_ack {
 public:

  rpc_lease_ack(const rpc_lease_ack&);
  rpc_lease_ack& operator=(const rpc_lease_ack&);
  rpc_lease_ack() : renewed(0), lease_period_ms(0) {
  }

  virtual ~rpc_lease_ack() throw();
  int64_t renewed;
  int64_t lease_period_ms;

  void __set_renewed(const int64_t val);

  void __set_lease_period_ms(const int64_t val);

  bool operator == (const rpc_lease_ack & rhs) const
  {
    if (!(renewed == rhs.renewed))
      return false;
    if (!(lease_period_ms == rhs.lease_period_ms))
      return false;
    return true;
  }
  bool operator != (const rpc_lease_ack &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const rpc_lease_ack & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(rpc_lease_ack &a, rpc_lease_ack &b);

std::ostream& operator<<(std::ostream& out, const rpc_lease_ack& obj);

typedef struct _lease_service_exception__isset {
  _lease_service_exception__isset() : msg(false) {}
  bool msg :1;
} _lease_service_exception__isset;

class lease_service_exception : public ::apache::thrift::TException {
 public:

  lease_service_exception(const lease_service_exception&);
  lease_service_exception& operator=(const lease_service_exception&);
  lease_service_exception() : msg() {
  }

  virtual ~lease_service_exception() throw();
  std::string msg;

  _lease_service_exception__isset __isset;

  void __set_msg(const std::string& val);

  bool operator == (const lease_service_exception & rhs) const
  {
    if (!(msg == rhs.msg))
      return false;
    return true;
  }
  bool operator != (const lease_service_exception &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const lease_service_exception & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

  virtual void printTo(std::ostream& out) const;
  mutable std::string thriftTExceptionMessageHolder_;
  const char* what() const throw();
};

void swap(lease_service_exception &a, lease_service_exception &b);

std::ostream& operator<<(std::ostream& out, const lease_service_exception& obj);

}} // namespace

#include "lease_service_types.tcc"

#endif

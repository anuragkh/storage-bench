/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef storage_management_service_H
#define storage_management_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "storage_management_service_types.h"

namespace mmux { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class storage_management_serviceIf {
 public:
  virtual ~storage_management_serviceIf() {}
  virtual void setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name) = 0;
  virtual void slot_range(rpc_slot_range& _return, const int32_t block_id) = 0;
  virtual void set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end) = 0;
  virtual void set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end) = 0;
  virtual void setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name) = 0;
  virtual void set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end) = 0;
  virtual void get_path(std::string& _return, const int32_t block_id) = 0;
  virtual void sync(const int32_t block_id, const std::string& backing_path) = 0;
  virtual void dump(const int32_t block_id, const std::string& backing_path) = 0;
  virtual void load(const int32_t block_id, const std::string& backing_path) = 0;
  virtual void reset(const int32_t block_id) = 0;
  virtual int64_t storage_capacity(const int32_t block_id) = 0;
  virtual int64_t storage_size(const int32_t block_id) = 0;
  virtual void resend_pending(const int32_t block_id) = 0;
  virtual void forward_all(const int32_t block_id) = 0;
  virtual void export_slots(const int32_t block_id) = 0;
};

class storage_management_serviceIfFactory {
 public:
  typedef storage_management_serviceIf Handler;

  virtual ~storage_management_serviceIfFactory() {}

  virtual storage_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(storage_management_serviceIf* /* handler */) = 0;
};

class storage_management_serviceIfSingletonFactory : virtual public storage_management_serviceIfFactory {
 public:
  storage_management_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf>& iface) : iface_(iface) {}
  virtual ~storage_management_serviceIfSingletonFactory() {}

  virtual storage_management_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(storage_management_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> iface_;
};

class storage_management_serviceNull : virtual public storage_management_serviceIf {
 public:
  virtual ~storage_management_serviceNull() {}
  void setup_block(const int32_t /* block_id */, const std::string& /* path */, const int32_t /* slot_begin */, const int32_t /* slot_end */, const std::vector<std::string> & /* chain */, const bool /* auto_scale */, const int32_t /* chain_role */, const std::string& /* next_block_name */) {
    return;
  }
  void slot_range(rpc_slot_range& /* _return */, const int32_t /* block_id */) {
    return;
  }
  void set_exporting(const int32_t /* block_id */, const std::vector<std::string> & /* target_block */, const int32_t /* slot_begin */, const int32_t /* slot_end */) {
    return;
  }
  void set_importing(const int32_t /* block_id */, const int32_t /* slot_begin */, const int32_t /* slot_end */) {
    return;
  }
  void setup_and_set_importing(const int32_t /* block_id */, const std::string& /* path */, const int32_t /* slot_begin */, const int32_t /* slot_end */, const std::vector<std::string> & /* chain */, const int32_t /* chain_role */, const std::string& /* next_block_name */) {
    return;
  }
  void set_regular(const int32_t /* block_id */, const int32_t /* slot_begin */, const int32_t /* slot_end */) {
    return;
  }
  void get_path(std::string& /* _return */, const int32_t /* block_id */) {
    return;
  }
  void sync(const int32_t /* block_id */, const std::string& /* backing_path */) {
    return;
  }
  void dump(const int32_t /* block_id */, const std::string& /* backing_path */) {
    return;
  }
  void load(const int32_t /* block_id */, const std::string& /* backing_path */) {
    return;
  }
  void reset(const int32_t /* block_id */) {
    return;
  }
  int64_t storage_capacity(const int32_t /* block_id */) {
    int64_t _return = 0;
    return _return;
  }
  int64_t storage_size(const int32_t /* block_id */) {
    int64_t _return = 0;
    return _return;
  }
  void resend_pending(const int32_t /* block_id */) {
    return;
  }
  void forward_all(const int32_t /* block_id */) {
    return;
  }
  void export_slots(const int32_t /* block_id */) {
    return;
  }
};

typedef struct _storage_management_service_setup_block_args__isset {
  _storage_management_service_setup_block_args__isset() : block_id(false), path(false), slot_begin(false), slot_end(false), chain(false), auto_scale(false), chain_role(false), next_block_name(false) {}
  bool block_id :1;
  bool path :1;
  bool slot_begin :1;
  bool slot_end :1;
  bool chain :1;
  bool auto_scale :1;
  bool chain_role :1;
  bool next_block_name :1;
} _storage_management_service_setup_block_args__isset;

class storage_management_service_setup_block_args {
 public:

  storage_management_service_setup_block_args(const storage_management_service_setup_block_args&);
  storage_management_service_setup_block_args& operator=(const storage_management_service_setup_block_args&);
  storage_management_service_setup_block_args() : block_id(0), path(), slot_begin(0), slot_end(0), auto_scale(0), chain_role(0), next_block_name() {
  }

  virtual ~storage_management_service_setup_block_args() throw();
  int32_t block_id;
  std::string path;
  int32_t slot_begin;
  int32_t slot_end;
  std::vector<std::string>  chain;
  bool auto_scale;
  int32_t chain_role;
  std::string next_block_name;

  _storage_management_service_setup_block_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_path(const std::string& val);

  void __set_slot_begin(const int32_t val);

  void __set_slot_end(const int32_t val);

  void __set_chain(const std::vector<std::string> & val);

  void __set_auto_scale(const bool val);

  void __set_chain_role(const int32_t val);

  void __set_next_block_name(const std::string& val);

  bool operator == (const storage_management_service_setup_block_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(slot_begin == rhs.slot_begin))
      return false;
    if (!(slot_end == rhs.slot_end))
      return false;
    if (!(chain == rhs.chain))
      return false;
    if (!(auto_scale == rhs.auto_scale))
      return false;
    if (!(chain_role == rhs.chain_role))
      return false;
    if (!(next_block_name == rhs.next_block_name))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_setup_block_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_setup_block_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_setup_block_pargs {
 public:


  virtual ~storage_management_service_setup_block_pargs() throw();
  const int32_t* block_id;
  const std::string* path;
  const int32_t* slot_begin;
  const int32_t* slot_end;
  const std::vector<std::string> * chain;
  const bool* auto_scale;
  const int32_t* chain_role;
  const std::string* next_block_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_setup_block_result__isset {
  _storage_management_service_setup_block_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_setup_block_result__isset;

class storage_management_service_setup_block_result {
 public:

  storage_management_service_setup_block_result(const storage_management_service_setup_block_result&);
  storage_management_service_setup_block_result& operator=(const storage_management_service_setup_block_result&);
  storage_management_service_setup_block_result() {
  }

  virtual ~storage_management_service_setup_block_result() throw();
  storage_management_exception ex;

  _storage_management_service_setup_block_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_setup_block_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_setup_block_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_setup_block_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_setup_block_presult__isset {
  _storage_management_service_setup_block_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_setup_block_presult__isset;

class storage_management_service_setup_block_presult {
 public:


  virtual ~storage_management_service_setup_block_presult() throw();
  storage_management_exception ex;

  _storage_management_service_setup_block_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_slot_range_args__isset {
  _storage_management_service_slot_range_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_slot_range_args__isset;

class storage_management_service_slot_range_args {
 public:

  storage_management_service_slot_range_args(const storage_management_service_slot_range_args&);
  storage_management_service_slot_range_args& operator=(const storage_management_service_slot_range_args&);
  storage_management_service_slot_range_args() : block_id(0) {
  }

  virtual ~storage_management_service_slot_range_args() throw();
  int32_t block_id;

  _storage_management_service_slot_range_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_slot_range_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_slot_range_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_slot_range_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_slot_range_pargs {
 public:


  virtual ~storage_management_service_slot_range_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_slot_range_result__isset {
  _storage_management_service_slot_range_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_slot_range_result__isset;

class storage_management_service_slot_range_result {
 public:

  storage_management_service_slot_range_result(const storage_management_service_slot_range_result&);
  storage_management_service_slot_range_result& operator=(const storage_management_service_slot_range_result&);
  storage_management_service_slot_range_result() {
  }

  virtual ~storage_management_service_slot_range_result() throw();
  rpc_slot_range success;
  storage_management_exception ex;

  _storage_management_service_slot_range_result__isset __isset;

  void __set_success(const rpc_slot_range& val);

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_slot_range_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_slot_range_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_slot_range_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_slot_range_presult__isset {
  _storage_management_service_slot_range_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_slot_range_presult__isset;

class storage_management_service_slot_range_presult {
 public:


  virtual ~storage_management_service_slot_range_presult() throw();
  rpc_slot_range* success;
  storage_management_exception ex;

  _storage_management_service_slot_range_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_set_exporting_args__isset {
  _storage_management_service_set_exporting_args__isset() : block_id(false), target_block(false), slot_begin(false), slot_end(false) {}
  bool block_id :1;
  bool target_block :1;
  bool slot_begin :1;
  bool slot_end :1;
} _storage_management_service_set_exporting_args__isset;

class storage_management_service_set_exporting_args {
 public:

  storage_management_service_set_exporting_args(const storage_management_service_set_exporting_args&);
  storage_management_service_set_exporting_args& operator=(const storage_management_service_set_exporting_args&);
  storage_management_service_set_exporting_args() : block_id(0), slot_begin(0), slot_end(0) {
  }

  virtual ~storage_management_service_set_exporting_args() throw();
  int32_t block_id;
  std::vector<std::string>  target_block;
  int32_t slot_begin;
  int32_t slot_end;

  _storage_management_service_set_exporting_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_target_block(const std::vector<std::string> & val);

  void __set_slot_begin(const int32_t val);

  void __set_slot_end(const int32_t val);

  bool operator == (const storage_management_service_set_exporting_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(target_block == rhs.target_block))
      return false;
    if (!(slot_begin == rhs.slot_begin))
      return false;
    if (!(slot_end == rhs.slot_end))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_exporting_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_exporting_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_set_exporting_pargs {
 public:


  virtual ~storage_management_service_set_exporting_pargs() throw();
  const int32_t* block_id;
  const std::vector<std::string> * target_block;
  const int32_t* slot_begin;
  const int32_t* slot_end;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_exporting_result__isset {
  _storage_management_service_set_exporting_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_exporting_result__isset;

class storage_management_service_set_exporting_result {
 public:

  storage_management_service_set_exporting_result(const storage_management_service_set_exporting_result&);
  storage_management_service_set_exporting_result& operator=(const storage_management_service_set_exporting_result&);
  storage_management_service_set_exporting_result() {
  }

  virtual ~storage_management_service_set_exporting_result() throw();
  storage_management_exception ex;

  _storage_management_service_set_exporting_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_set_exporting_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_exporting_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_exporting_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_exporting_presult__isset {
  _storage_management_service_set_exporting_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_exporting_presult__isset;

class storage_management_service_set_exporting_presult {
 public:


  virtual ~storage_management_service_set_exporting_presult() throw();
  storage_management_exception ex;

  _storage_management_service_set_exporting_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_set_importing_args__isset {
  _storage_management_service_set_importing_args__isset() : block_id(false), slot_begin(false), slot_end(false) {}
  bool block_id :1;
  bool slot_begin :1;
  bool slot_end :1;
} _storage_management_service_set_importing_args__isset;

class storage_management_service_set_importing_args {
 public:

  storage_management_service_set_importing_args(const storage_management_service_set_importing_args&);
  storage_management_service_set_importing_args& operator=(const storage_management_service_set_importing_args&);
  storage_management_service_set_importing_args() : block_id(0), slot_begin(0), slot_end(0) {
  }

  virtual ~storage_management_service_set_importing_args() throw();
  int32_t block_id;
  int32_t slot_begin;
  int32_t slot_end;

  _storage_management_service_set_importing_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_slot_begin(const int32_t val);

  void __set_slot_end(const int32_t val);

  bool operator == (const storage_management_service_set_importing_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(slot_begin == rhs.slot_begin))
      return false;
    if (!(slot_end == rhs.slot_end))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_importing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_importing_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_set_importing_pargs {
 public:


  virtual ~storage_management_service_set_importing_pargs() throw();
  const int32_t* block_id;
  const int32_t* slot_begin;
  const int32_t* slot_end;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_importing_result__isset {
  _storage_management_service_set_importing_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_importing_result__isset;

class storage_management_service_set_importing_result {
 public:

  storage_management_service_set_importing_result(const storage_management_service_set_importing_result&);
  storage_management_service_set_importing_result& operator=(const storage_management_service_set_importing_result&);
  storage_management_service_set_importing_result() {
  }

  virtual ~storage_management_service_set_importing_result() throw();
  storage_management_exception ex;

  _storage_management_service_set_importing_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_set_importing_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_importing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_importing_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_importing_presult__isset {
  _storage_management_service_set_importing_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_importing_presult__isset;

class storage_management_service_set_importing_presult {
 public:


  virtual ~storage_management_service_set_importing_presult() throw();
  storage_management_exception ex;

  _storage_management_service_set_importing_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_setup_and_set_importing_args__isset {
  _storage_management_service_setup_and_set_importing_args__isset() : block_id(false), path(false), slot_begin(false), slot_end(false), chain(false), chain_role(false), next_block_name(false) {}
  bool block_id :1;
  bool path :1;
  bool slot_begin :1;
  bool slot_end :1;
  bool chain :1;
  bool chain_role :1;
  bool next_block_name :1;
} _storage_management_service_setup_and_set_importing_args__isset;

class storage_management_service_setup_and_set_importing_args {
 public:

  storage_management_service_setup_and_set_importing_args(const storage_management_service_setup_and_set_importing_args&);
  storage_management_service_setup_and_set_importing_args& operator=(const storage_management_service_setup_and_set_importing_args&);
  storage_management_service_setup_and_set_importing_args() : block_id(0), path(), slot_begin(0), slot_end(0), chain_role(0), next_block_name() {
  }

  virtual ~storage_management_service_setup_and_set_importing_args() throw();
  int32_t block_id;
  std::string path;
  int32_t slot_begin;
  int32_t slot_end;
  std::vector<std::string>  chain;
  int32_t chain_role;
  std::string next_block_name;

  _storage_management_service_setup_and_set_importing_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_path(const std::string& val);

  void __set_slot_begin(const int32_t val);

  void __set_slot_end(const int32_t val);

  void __set_chain(const std::vector<std::string> & val);

  void __set_chain_role(const int32_t val);

  void __set_next_block_name(const std::string& val);

  bool operator == (const storage_management_service_setup_and_set_importing_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(path == rhs.path))
      return false;
    if (!(slot_begin == rhs.slot_begin))
      return false;
    if (!(slot_end == rhs.slot_end))
      return false;
    if (!(chain == rhs.chain))
      return false;
    if (!(chain_role == rhs.chain_role))
      return false;
    if (!(next_block_name == rhs.next_block_name))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_setup_and_set_importing_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_setup_and_set_importing_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_setup_and_set_importing_pargs {
 public:


  virtual ~storage_management_service_setup_and_set_importing_pargs() throw();
  const int32_t* block_id;
  const std::string* path;
  const int32_t* slot_begin;
  const int32_t* slot_end;
  const std::vector<std::string> * chain;
  const int32_t* chain_role;
  const std::string* next_block_name;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_setup_and_set_importing_result__isset {
  _storage_management_service_setup_and_set_importing_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_setup_and_set_importing_result__isset;

class storage_management_service_setup_and_set_importing_result {
 public:

  storage_management_service_setup_and_set_importing_result(const storage_management_service_setup_and_set_importing_result&);
  storage_management_service_setup_and_set_importing_result& operator=(const storage_management_service_setup_and_set_importing_result&);
  storage_management_service_setup_and_set_importing_result() {
  }

  virtual ~storage_management_service_setup_and_set_importing_result() throw();
  storage_management_exception ex;

  _storage_management_service_setup_and_set_importing_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_setup_and_set_importing_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_setup_and_set_importing_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_setup_and_set_importing_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_setup_and_set_importing_presult__isset {
  _storage_management_service_setup_and_set_importing_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_setup_and_set_importing_presult__isset;

class storage_management_service_setup_and_set_importing_presult {
 public:


  virtual ~storage_management_service_setup_and_set_importing_presult() throw();
  storage_management_exception ex;

  _storage_management_service_setup_and_set_importing_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_set_regular_args__isset {
  _storage_management_service_set_regular_args__isset() : block_id(false), slot_begin(false), slot_end(false) {}
  bool block_id :1;
  bool slot_begin :1;
  bool slot_end :1;
} _storage_management_service_set_regular_args__isset;

class storage_management_service_set_regular_args {
 public:

  storage_management_service_set_regular_args(const storage_management_service_set_regular_args&);
  storage_management_service_set_regular_args& operator=(const storage_management_service_set_regular_args&);
  storage_management_service_set_regular_args() : block_id(0), slot_begin(0), slot_end(0) {
  }

  virtual ~storage_management_service_set_regular_args() throw();
  int32_t block_id;
  int32_t slot_begin;
  int32_t slot_end;

  _storage_management_service_set_regular_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_slot_begin(const int32_t val);

  void __set_slot_end(const int32_t val);

  bool operator == (const storage_management_service_set_regular_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(slot_begin == rhs.slot_begin))
      return false;
    if (!(slot_end == rhs.slot_end))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_regular_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_regular_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_set_regular_pargs {
 public:


  virtual ~storage_management_service_set_regular_pargs() throw();
  const int32_t* block_id;
  const int32_t* slot_begin;
  const int32_t* slot_end;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_regular_result__isset {
  _storage_management_service_set_regular_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_regular_result__isset;

class storage_management_service_set_regular_result {
 public:

  storage_management_service_set_regular_result(const storage_management_service_set_regular_result&);
  storage_management_service_set_regular_result& operator=(const storage_management_service_set_regular_result&);
  storage_management_service_set_regular_result() {
  }

  virtual ~storage_management_service_set_regular_result() throw();
  storage_management_exception ex;

  _storage_management_service_set_regular_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_set_regular_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_set_regular_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_set_regular_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_set_regular_presult__isset {
  _storage_management_service_set_regular_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_set_regular_presult__isset;

class storage_management_service_set_regular_presult {
 public:


  virtual ~storage_management_service_set_regular_presult() throw();
  storage_management_exception ex;

  _storage_management_service_set_regular_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_get_path_args__isset {
  _storage_management_service_get_path_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_get_path_args__isset;

class storage_management_service_get_path_args {
 public:

  storage_management_service_get_path_args(const storage_management_service_get_path_args&);
  storage_management_service_get_path_args& operator=(const storage_management_service_get_path_args&);
  storage_management_service_get_path_args() : block_id(0) {
  }

  virtual ~storage_management_service_get_path_args() throw();
  int32_t block_id;

  _storage_management_service_get_path_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_get_path_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_get_path_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_get_path_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_get_path_pargs {
 public:


  virtual ~storage_management_service_get_path_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_get_path_result__isset {
  _storage_management_service_get_path_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_get_path_result__isset;

class storage_management_service_get_path_result {
 public:

  storage_management_service_get_path_result(const storage_management_service_get_path_result&);
  storage_management_service_get_path_result& operator=(const storage_management_service_get_path_result&);
  storage_management_service_get_path_result() : success() {
  }

  virtual ~storage_management_service_get_path_result() throw();
  std::string success;
  storage_management_exception ex;

  _storage_management_service_get_path_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_get_path_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_get_path_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_get_path_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_get_path_presult__isset {
  _storage_management_service_get_path_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_get_path_presult__isset;

class storage_management_service_get_path_presult {
 public:


  virtual ~storage_management_service_get_path_presult() throw();
  std::string* success;
  storage_management_exception ex;

  _storage_management_service_get_path_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_sync_args__isset {
  _storage_management_service_sync_args__isset() : block_id(false), backing_path(false) {}
  bool block_id :1;
  bool backing_path :1;
} _storage_management_service_sync_args__isset;

class storage_management_service_sync_args {
 public:

  storage_management_service_sync_args(const storage_management_service_sync_args&);
  storage_management_service_sync_args& operator=(const storage_management_service_sync_args&);
  storage_management_service_sync_args() : block_id(0), backing_path() {
  }

  virtual ~storage_management_service_sync_args() throw();
  int32_t block_id;
  std::string backing_path;

  _storage_management_service_sync_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_backing_path(const std::string& val);

  bool operator == (const storage_management_service_sync_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(backing_path == rhs.backing_path))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_sync_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_sync_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_sync_pargs {
 public:


  virtual ~storage_management_service_sync_pargs() throw();
  const int32_t* block_id;
  const std::string* backing_path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_sync_result__isset {
  _storage_management_service_sync_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_sync_result__isset;

class storage_management_service_sync_result {
 public:

  storage_management_service_sync_result(const storage_management_service_sync_result&);
  storage_management_service_sync_result& operator=(const storage_management_service_sync_result&);
  storage_management_service_sync_result() {
  }

  virtual ~storage_management_service_sync_result() throw();
  storage_management_exception ex;

  _storage_management_service_sync_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_sync_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_sync_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_sync_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_sync_presult__isset {
  _storage_management_service_sync_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_sync_presult__isset;

class storage_management_service_sync_presult {
 public:


  virtual ~storage_management_service_sync_presult() throw();
  storage_management_exception ex;

  _storage_management_service_sync_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_dump_args__isset {
  _storage_management_service_dump_args__isset() : block_id(false), backing_path(false) {}
  bool block_id :1;
  bool backing_path :1;
} _storage_management_service_dump_args__isset;

class storage_management_service_dump_args {
 public:

  storage_management_service_dump_args(const storage_management_service_dump_args&);
  storage_management_service_dump_args& operator=(const storage_management_service_dump_args&);
  storage_management_service_dump_args() : block_id(0), backing_path() {
  }

  virtual ~storage_management_service_dump_args() throw();
  int32_t block_id;
  std::string backing_path;

  _storage_management_service_dump_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_backing_path(const std::string& val);

  bool operator == (const storage_management_service_dump_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(backing_path == rhs.backing_path))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_dump_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_dump_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_dump_pargs {
 public:


  virtual ~storage_management_service_dump_pargs() throw();
  const int32_t* block_id;
  const std::string* backing_path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_dump_result__isset {
  _storage_management_service_dump_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_dump_result__isset;

class storage_management_service_dump_result {
 public:

  storage_management_service_dump_result(const storage_management_service_dump_result&);
  storage_management_service_dump_result& operator=(const storage_management_service_dump_result&);
  storage_management_service_dump_result() {
  }

  virtual ~storage_management_service_dump_result() throw();
  storage_management_exception ex;

  _storage_management_service_dump_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_dump_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_dump_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_dump_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_dump_presult__isset {
  _storage_management_service_dump_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_dump_presult__isset;

class storage_management_service_dump_presult {
 public:


  virtual ~storage_management_service_dump_presult() throw();
  storage_management_exception ex;

  _storage_management_service_dump_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_load_args__isset {
  _storage_management_service_load_args__isset() : block_id(false), backing_path(false) {}
  bool block_id :1;
  bool backing_path :1;
} _storage_management_service_load_args__isset;

class storage_management_service_load_args {
 public:

  storage_management_service_load_args(const storage_management_service_load_args&);
  storage_management_service_load_args& operator=(const storage_management_service_load_args&);
  storage_management_service_load_args() : block_id(0), backing_path() {
  }

  virtual ~storage_management_service_load_args() throw();
  int32_t block_id;
  std::string backing_path;

  _storage_management_service_load_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_backing_path(const std::string& val);

  bool operator == (const storage_management_service_load_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(backing_path == rhs.backing_path))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_load_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_load_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_load_pargs {
 public:


  virtual ~storage_management_service_load_pargs() throw();
  const int32_t* block_id;
  const std::string* backing_path;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_load_result__isset {
  _storage_management_service_load_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_load_result__isset;

class storage_management_service_load_result {
 public:

  storage_management_service_load_result(const storage_management_service_load_result&);
  storage_management_service_load_result& operator=(const storage_management_service_load_result&);
  storage_management_service_load_result() {
  }

  virtual ~storage_management_service_load_result() throw();
  storage_management_exception ex;

  _storage_management_service_load_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_load_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_load_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_load_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_load_presult__isset {
  _storage_management_service_load_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_load_presult__isset;

class storage_management_service_load_presult {
 public:


  virtual ~storage_management_service_load_presult() throw();
  storage_management_exception ex;

  _storage_management_service_load_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_reset_args__isset {
  _storage_management_service_reset_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_reset_args__isset;

class storage_management_service_reset_args {
 public:

  storage_management_service_reset_args(const storage_management_service_reset_args&);
  storage_management_service_reset_args& operator=(const storage_management_service_reset_args&);
  storage_management_service_reset_args() : block_id(0) {
  }

  virtual ~storage_management_service_reset_args() throw();
  int32_t block_id;

  _storage_management_service_reset_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_reset_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_reset_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_reset_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_reset_pargs {
 public:


  virtual ~storage_management_service_reset_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_reset_result__isset {
  _storage_management_service_reset_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_reset_result__isset;

class storage_management_service_reset_result {
 public:

  storage_management_service_reset_result(const storage_management_service_reset_result&);
  storage_management_service_reset_result& operator=(const storage_management_service_reset_result&);
  storage_management_service_reset_result() {
  }

  virtual ~storage_management_service_reset_result() throw();
  storage_management_exception ex;

  _storage_management_service_reset_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_reset_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_reset_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_reset_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_reset_presult__isset {
  _storage_management_service_reset_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_reset_presult__isset;

class storage_management_service_reset_presult {
 public:


  virtual ~storage_management_service_reset_presult() throw();
  storage_management_exception ex;

  _storage_management_service_reset_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_storage_capacity_args__isset {
  _storage_management_service_storage_capacity_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_storage_capacity_args__isset;

class storage_management_service_storage_capacity_args {
 public:

  storage_management_service_storage_capacity_args(const storage_management_service_storage_capacity_args&);
  storage_management_service_storage_capacity_args& operator=(const storage_management_service_storage_capacity_args&);
  storage_management_service_storage_capacity_args() : block_id(0) {
  }

  virtual ~storage_management_service_storage_capacity_args() throw();
  int32_t block_id;

  _storage_management_service_storage_capacity_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_storage_capacity_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_storage_capacity_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_storage_capacity_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_storage_capacity_pargs {
 public:


  virtual ~storage_management_service_storage_capacity_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_storage_capacity_result__isset {
  _storage_management_service_storage_capacity_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_storage_capacity_result__isset;

class storage_management_service_storage_capacity_result {
 public:

  storage_management_service_storage_capacity_result(const storage_management_service_storage_capacity_result&);
  storage_management_service_storage_capacity_result& operator=(const storage_management_service_storage_capacity_result&);
  storage_management_service_storage_capacity_result() : success(0) {
  }

  virtual ~storage_management_service_storage_capacity_result() throw();
  int64_t success;
  storage_management_exception ex;

  _storage_management_service_storage_capacity_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_storage_capacity_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_storage_capacity_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_storage_capacity_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_storage_capacity_presult__isset {
  _storage_management_service_storage_capacity_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_storage_capacity_presult__isset;

class storage_management_service_storage_capacity_presult {
 public:


  virtual ~storage_management_service_storage_capacity_presult() throw();
  int64_t* success;
  storage_management_exception ex;

  _storage_management_service_storage_capacity_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_storage_size_args__isset {
  _storage_management_service_storage_size_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_storage_size_args__isset;

class storage_management_service_storage_size_args {
 public:

  storage_management_service_storage_size_args(const storage_management_service_storage_size_args&);
  storage_management_service_storage_size_args& operator=(const storage_management_service_storage_size_args&);
  storage_management_service_storage_size_args() : block_id(0) {
  }

  virtual ~storage_management_service_storage_size_args() throw();
  int32_t block_id;

  _storage_management_service_storage_size_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_storage_size_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_storage_size_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_storage_size_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_storage_size_pargs {
 public:


  virtual ~storage_management_service_storage_size_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_storage_size_result__isset {
  _storage_management_service_storage_size_result__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_storage_size_result__isset;

class storage_management_service_storage_size_result {
 public:

  storage_management_service_storage_size_result(const storage_management_service_storage_size_result&);
  storage_management_service_storage_size_result& operator=(const storage_management_service_storage_size_result&);
  storage_management_service_storage_size_result() : success(0) {
  }

  virtual ~storage_management_service_storage_size_result() throw();
  int64_t success;
  storage_management_exception ex;

  _storage_management_service_storage_size_result__isset __isset;

  void __set_success(const int64_t val);

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_storage_size_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_storage_size_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_storage_size_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_storage_size_presult__isset {
  _storage_management_service_storage_size_presult__isset() : success(false), ex(false) {}
  bool success :1;
  bool ex :1;
} _storage_management_service_storage_size_presult__isset;

class storage_management_service_storage_size_presult {
 public:


  virtual ~storage_management_service_storage_size_presult() throw();
  int64_t* success;
  storage_management_exception ex;

  _storage_management_service_storage_size_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_resend_pending_args__isset {
  _storage_management_service_resend_pending_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_resend_pending_args__isset;

class storage_management_service_resend_pending_args {
 public:

  storage_management_service_resend_pending_args(const storage_management_service_resend_pending_args&);
  storage_management_service_resend_pending_args& operator=(const storage_management_service_resend_pending_args&);
  storage_management_service_resend_pending_args() : block_id(0) {
  }

  virtual ~storage_management_service_resend_pending_args() throw();
  int32_t block_id;

  _storage_management_service_resend_pending_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_resend_pending_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_resend_pending_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_resend_pending_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_resend_pending_pargs {
 public:


  virtual ~storage_management_service_resend_pending_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_resend_pending_result__isset {
  _storage_management_service_resend_pending_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_resend_pending_result__isset;

class storage_management_service_resend_pending_result {
 public:

  storage_management_service_resend_pending_result(const storage_management_service_resend_pending_result&);
  storage_management_service_resend_pending_result& operator=(const storage_management_service_resend_pending_result&);
  storage_management_service_resend_pending_result() {
  }

  virtual ~storage_management_service_resend_pending_result() throw();
  storage_management_exception ex;

  _storage_management_service_resend_pending_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_resend_pending_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_resend_pending_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_resend_pending_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_resend_pending_presult__isset {
  _storage_management_service_resend_pending_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_resend_pending_presult__isset;

class storage_management_service_resend_pending_presult {
 public:


  virtual ~storage_management_service_resend_pending_presult() throw();
  storage_management_exception ex;

  _storage_management_service_resend_pending_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_forward_all_args__isset {
  _storage_management_service_forward_all_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_forward_all_args__isset;

class storage_management_service_forward_all_args {
 public:

  storage_management_service_forward_all_args(const storage_management_service_forward_all_args&);
  storage_management_service_forward_all_args& operator=(const storage_management_service_forward_all_args&);
  storage_management_service_forward_all_args() : block_id(0) {
  }

  virtual ~storage_management_service_forward_all_args() throw();
  int32_t block_id;

  _storage_management_service_forward_all_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_forward_all_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_forward_all_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_forward_all_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_forward_all_pargs {
 public:


  virtual ~storage_management_service_forward_all_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_forward_all_result__isset {
  _storage_management_service_forward_all_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_forward_all_result__isset;

class storage_management_service_forward_all_result {
 public:

  storage_management_service_forward_all_result(const storage_management_service_forward_all_result&);
  storage_management_service_forward_all_result& operator=(const storage_management_service_forward_all_result&);
  storage_management_service_forward_all_result() {
  }

  virtual ~storage_management_service_forward_all_result() throw();
  storage_management_exception ex;

  _storage_management_service_forward_all_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_forward_all_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_forward_all_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_forward_all_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_forward_all_presult__isset {
  _storage_management_service_forward_all_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_forward_all_presult__isset;

class storage_management_service_forward_all_presult {
 public:


  virtual ~storage_management_service_forward_all_presult() throw();
  storage_management_exception ex;

  _storage_management_service_forward_all_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _storage_management_service_export_slots_args__isset {
  _storage_management_service_export_slots_args__isset() : block_id(false) {}
  bool block_id :1;
} _storage_management_service_export_slots_args__isset;

class storage_management_service_export_slots_args {
 public:

  storage_management_service_export_slots_args(const storage_management_service_export_slots_args&);
  storage_management_service_export_slots_args& operator=(const storage_management_service_export_slots_args&);
  storage_management_service_export_slots_args() : block_id(0) {
  }

  virtual ~storage_management_service_export_slots_args() throw();
  int32_t block_id;

  _storage_management_service_export_slots_args__isset __isset;

  void __set_block_id(const int32_t val);

  bool operator == (const storage_management_service_export_slots_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_export_slots_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_export_slots_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class storage_management_service_export_slots_pargs {
 public:


  virtual ~storage_management_service_export_slots_pargs() throw();
  const int32_t* block_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_export_slots_result__isset {
  _storage_management_service_export_slots_result__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_export_slots_result__isset;

class storage_management_service_export_slots_result {
 public:

  storage_management_service_export_slots_result(const storage_management_service_export_slots_result&);
  storage_management_service_export_slots_result& operator=(const storage_management_service_export_slots_result&);
  storage_management_service_export_slots_result() {
  }

  virtual ~storage_management_service_export_slots_result() throw();
  storage_management_exception ex;

  _storage_management_service_export_slots_result__isset __isset;

  void __set_ex(const storage_management_exception& val);

  bool operator == (const storage_management_service_export_slots_result & rhs) const
  {
    if (!(ex == rhs.ex))
      return false;
    return true;
  }
  bool operator != (const storage_management_service_export_slots_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const storage_management_service_export_slots_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _storage_management_service_export_slots_presult__isset {
  _storage_management_service_export_slots_presult__isset() : ex(false) {}
  bool ex :1;
} _storage_management_service_export_slots_presult__isset;

class storage_management_service_export_slots_presult {
 public:


  virtual ~storage_management_service_export_slots_presult() throw();
  storage_management_exception ex;

  _storage_management_service_export_slots_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

template <class Protocol_>
class storage_management_serviceClientT : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  storage_management_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name);
  void send_setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name);
  void recv_setup_block();
  void slot_range(rpc_slot_range& _return, const int32_t block_id);
  void send_slot_range(const int32_t block_id);
  void recv_slot_range(rpc_slot_range& _return);
  void set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end);
  void send_set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_exporting();
  void set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void send_set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_importing();
  void setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name);
  void send_setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name);
  void recv_setup_and_set_importing();
  void set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void send_set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_regular();
  void get_path(std::string& _return, const int32_t block_id);
  void send_get_path(const int32_t block_id);
  void recv_get_path(std::string& _return);
  void sync(const int32_t block_id, const std::string& backing_path);
  void send_sync(const int32_t block_id, const std::string& backing_path);
  void recv_sync();
  void dump(const int32_t block_id, const std::string& backing_path);
  void send_dump(const int32_t block_id, const std::string& backing_path);
  void recv_dump();
  void load(const int32_t block_id, const std::string& backing_path);
  void send_load(const int32_t block_id, const std::string& backing_path);
  void recv_load();
  void reset(const int32_t block_id);
  void send_reset(const int32_t block_id);
  void recv_reset();
  int64_t storage_capacity(const int32_t block_id);
  void send_storage_capacity(const int32_t block_id);
  int64_t recv_storage_capacity();
  int64_t storage_size(const int32_t block_id);
  void send_storage_size(const int32_t block_id);
  int64_t recv_storage_size();
  void resend_pending(const int32_t block_id);
  void send_resend_pending(const int32_t block_id);
  void recv_resend_pending();
  void forward_all(const int32_t block_id);
  void send_forward_all(const int32_t block_id);
  void recv_forward_all();
  void export_slots(const int32_t block_id);
  void send_export_slots(const int32_t block_id);
  void recv_export_slots();
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef storage_management_serviceClientT< ::apache::thrift::protocol::TProtocol> storage_management_serviceClient;

template <class Protocol_>
class storage_management_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (storage_management_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (storage_management_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_setup_block(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setup_block(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_slot_range(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_slot_range(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_set_exporting(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_exporting(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_set_importing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_importing(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_setup_and_set_importing(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setup_and_set_importing(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_set_regular(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_set_regular(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_get_path(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_path(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_sync(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_sync(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_dump(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_dump(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_load(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_load(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_reset(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_reset(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_storage_capacity(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storage_capacity(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_storage_size(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_storage_size(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_resend_pending(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resend_pending(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_forward_all(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_forward_all(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_export_slots(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_export_slots(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  storage_management_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> iface) :
    iface_(iface) {
    processMap_["setup_block"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_setup_block,
      &storage_management_serviceProcessorT::process_setup_block);
    processMap_["slot_range"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_slot_range,
      &storage_management_serviceProcessorT::process_slot_range);
    processMap_["set_exporting"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_set_exporting,
      &storage_management_serviceProcessorT::process_set_exporting);
    processMap_["set_importing"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_set_importing,
      &storage_management_serviceProcessorT::process_set_importing);
    processMap_["setup_and_set_importing"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_setup_and_set_importing,
      &storage_management_serviceProcessorT::process_setup_and_set_importing);
    processMap_["set_regular"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_set_regular,
      &storage_management_serviceProcessorT::process_set_regular);
    processMap_["get_path"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_get_path,
      &storage_management_serviceProcessorT::process_get_path);
    processMap_["sync"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_sync,
      &storage_management_serviceProcessorT::process_sync);
    processMap_["dump"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_dump,
      &storage_management_serviceProcessorT::process_dump);
    processMap_["load"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_load,
      &storage_management_serviceProcessorT::process_load);
    processMap_["reset"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_reset,
      &storage_management_serviceProcessorT::process_reset);
    processMap_["storage_capacity"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_storage_capacity,
      &storage_management_serviceProcessorT::process_storage_capacity);
    processMap_["storage_size"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_storage_size,
      &storage_management_serviceProcessorT::process_storage_size);
    processMap_["resend_pending"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_resend_pending,
      &storage_management_serviceProcessorT::process_resend_pending);
    processMap_["forward_all"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_forward_all,
      &storage_management_serviceProcessorT::process_forward_all);
    processMap_["export_slots"] = ProcessFunctions(
      &storage_management_serviceProcessorT::process_export_slots,
      &storage_management_serviceProcessorT::process_export_slots);
  }

  virtual ~storage_management_serviceProcessorT() {}
};

typedef storage_management_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > storage_management_serviceProcessor;

template <class Protocol_>
class storage_management_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  storage_management_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< storage_management_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< storage_management_serviceIfFactory > handlerFactory_;
};

typedef storage_management_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > storage_management_serviceProcessorFactory;

class storage_management_serviceMultiface : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~storage_management_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> > ifaces_;
  storage_management_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<storage_management_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setup_block(block_id, path, slot_begin, slot_end, chain, auto_scale, chain_role, next_block_name);
    }
    ifaces_[i]->setup_block(block_id, path, slot_begin, slot_end, chain, auto_scale, chain_role, next_block_name);
  }

  void slot_range(rpc_slot_range& _return, const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->slot_range(_return, block_id);
    }
    ifaces_[i]->slot_range(_return, block_id);
    return;
  }

  void set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_exporting(block_id, target_block, slot_begin, slot_end);
    }
    ifaces_[i]->set_exporting(block_id, target_block, slot_begin, slot_end);
  }

  void set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_importing(block_id, slot_begin, slot_end);
    }
    ifaces_[i]->set_importing(block_id, slot_begin, slot_end);
  }

  void setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setup_and_set_importing(block_id, path, slot_begin, slot_end, chain, chain_role, next_block_name);
    }
    ifaces_[i]->setup_and_set_importing(block_id, path, slot_begin, slot_end, chain, chain_role, next_block_name);
  }

  void set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->set_regular(block_id, slot_begin, slot_end);
    }
    ifaces_[i]->set_regular(block_id, slot_begin, slot_end);
  }

  void get_path(std::string& _return, const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_path(_return, block_id);
    }
    ifaces_[i]->get_path(_return, block_id);
    return;
  }

  void sync(const int32_t block_id, const std::string& backing_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->sync(block_id, backing_path);
    }
    ifaces_[i]->sync(block_id, backing_path);
  }

  void dump(const int32_t block_id, const std::string& backing_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->dump(block_id, backing_path);
    }
    ifaces_[i]->dump(block_id, backing_path);
  }

  void load(const int32_t block_id, const std::string& backing_path) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->load(block_id, backing_path);
    }
    ifaces_[i]->load(block_id, backing_path);
  }

  void reset(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->reset(block_id);
    }
    ifaces_[i]->reset(block_id);
  }

  int64_t storage_capacity(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storage_capacity(block_id);
    }
    return ifaces_[i]->storage_capacity(block_id);
  }

  int64_t storage_size(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->storage_size(block_id);
    }
    return ifaces_[i]->storage_size(block_id);
  }

  void resend_pending(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resend_pending(block_id);
    }
    ifaces_[i]->resend_pending(block_id);
  }

  void forward_all(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->forward_all(block_id);
    }
    ifaces_[i]->forward_all(block_id);
  }

  void export_slots(const int32_t block_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->export_slots(block_id);
    }
    ifaces_[i]->export_slots(block_id);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class storage_management_serviceConcurrentClientT : virtual public storage_management_serviceIf {
 public:
  storage_management_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  storage_management_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name);
  int32_t send_setup_block(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const bool auto_scale, const int32_t chain_role, const std::string& next_block_name);
  void recv_setup_block(const int32_t seqid);
  void slot_range(rpc_slot_range& _return, const int32_t block_id);
  int32_t send_slot_range(const int32_t block_id);
  void recv_slot_range(rpc_slot_range& _return, const int32_t seqid);
  void set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end);
  int32_t send_set_exporting(const int32_t block_id, const std::vector<std::string> & target_block, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_exporting(const int32_t seqid);
  void set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  int32_t send_set_importing(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_importing(const int32_t seqid);
  void setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name);
  int32_t send_setup_and_set_importing(const int32_t block_id, const std::string& path, const int32_t slot_begin, const int32_t slot_end, const std::vector<std::string> & chain, const int32_t chain_role, const std::string& next_block_name);
  void recv_setup_and_set_importing(const int32_t seqid);
  void set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  int32_t send_set_regular(const int32_t block_id, const int32_t slot_begin, const int32_t slot_end);
  void recv_set_regular(const int32_t seqid);
  void get_path(std::string& _return, const int32_t block_id);
  int32_t send_get_path(const int32_t block_id);
  void recv_get_path(std::string& _return, const int32_t seqid);
  void sync(const int32_t block_id, const std::string& backing_path);
  int32_t send_sync(const int32_t block_id, const std::string& backing_path);
  void recv_sync(const int32_t seqid);
  void dump(const int32_t block_id, const std::string& backing_path);
  int32_t send_dump(const int32_t block_id, const std::string& backing_path);
  void recv_dump(const int32_t seqid);
  void load(const int32_t block_id, const std::string& backing_path);
  int32_t send_load(const int32_t block_id, const std::string& backing_path);
  void recv_load(const int32_t seqid);
  void reset(const int32_t block_id);
  int32_t send_reset(const int32_t block_id);
  void recv_reset(const int32_t seqid);
  int64_t storage_capacity(const int32_t block_id);
  int32_t send_storage_capacity(const int32_t block_id);
  int64_t recv_storage_capacity(const int32_t seqid);
  int64_t storage_size(const int32_t block_id);
  int32_t send_storage_size(const int32_t block_id);
  int64_t recv_storage_size(const int32_t seqid);
  void resend_pending(const int32_t block_id);
  int32_t send_resend_pending(const int32_t block_id);
  void recv_resend_pending(const int32_t seqid);
  void forward_all(const int32_t block_id);
  int32_t send_forward_all(const int32_t block_id);
  void recv_forward_all(const int32_t seqid);
  void export_slots(const int32_t block_id);
  int32_t send_export_slots(const int32_t block_id);
  void recv_export_slots(const int32_t seqid);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef storage_management_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> storage_management_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "storage_management_service.tcc"
#include "storage_management_service_types.tcc"

#endif

/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef notification_service_H
#define notification_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "notification_service_types.h"

namespace mmux { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class notification_serviceIf {
 public:
  virtual ~notification_serviceIf() {}
  virtual void subscribe(const int32_t block_id, const std::vector<std::string> & ops) = 0;
  virtual void unsubscribe(const int32_t block_id, const std::vector<std::string> & ops) = 0;
};

class notification_serviceIfFactory {
 public:
  typedef notification_serviceIf Handler;

  virtual ~notification_serviceIfFactory() {}

  virtual notification_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(notification_serviceIf* /* handler */) = 0;
};

class notification_serviceIfSingletonFactory : virtual public notification_serviceIfFactory {
 public:
  notification_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<notification_serviceIf>& iface) : iface_(iface) {}
  virtual ~notification_serviceIfSingletonFactory() {}

  virtual notification_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(notification_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<notification_serviceIf> iface_;
};

class notification_serviceNull : virtual public notification_serviceIf {
 public:
  virtual ~notification_serviceNull() {}
  void subscribe(const int32_t /* block_id */, const std::vector<std::string> & /* ops */) {
    return;
  }
  void unsubscribe(const int32_t /* block_id */, const std::vector<std::string> & /* ops */) {
    return;
  }
};

typedef struct _notification_service_subscribe_args__isset {
  _notification_service_subscribe_args__isset() : block_id(false), ops(false) {}
  bool block_id :1;
  bool ops :1;
} _notification_service_subscribe_args__isset;

class notification_service_subscribe_args {
 public:

  notification_service_subscribe_args(const notification_service_subscribe_args&);
  notification_service_subscribe_args& operator=(const notification_service_subscribe_args&);
  notification_service_subscribe_args() : block_id(0) {
  }

  virtual ~notification_service_subscribe_args() throw();
  int32_t block_id;
  std::vector<std::string>  ops;

  _notification_service_subscribe_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_ops(const std::vector<std::string> & val);

  bool operator == (const notification_service_subscribe_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const notification_service_subscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const notification_service_subscribe_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class notification_service_subscribe_pargs {
 public:


  virtual ~notification_service_subscribe_pargs() throw();
  const int32_t* block_id;
  const std::vector<std::string> * ops;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _notification_service_unsubscribe_args__isset {
  _notification_service_unsubscribe_args__isset() : block_id(false), ops(false) {}
  bool block_id :1;
  bool ops :1;
} _notification_service_unsubscribe_args__isset;

class notification_service_unsubscribe_args {
 public:

  notification_service_unsubscribe_args(const notification_service_unsubscribe_args&);
  notification_service_unsubscribe_args& operator=(const notification_service_unsubscribe_args&);
  notification_service_unsubscribe_args() : block_id(0) {
  }

  virtual ~notification_service_unsubscribe_args() throw();
  int32_t block_id;
  std::vector<std::string>  ops;

  _notification_service_unsubscribe_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_ops(const std::vector<std::string> & val);

  bool operator == (const notification_service_unsubscribe_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(ops == rhs.ops))
      return false;
    return true;
  }
  bool operator != (const notification_service_unsubscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const notification_service_unsubscribe_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class notification_service_unsubscribe_pargs {
 public:


  virtual ~notification_service_unsubscribe_pargs() throw();
  const int32_t* block_id;
  const std::vector<std::string> * ops;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

template <class Protocol_>
class notification_serviceClientT : virtual public notification_serviceIf {
 public:
  notification_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  notification_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void subscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void send_subscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void unsubscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void send_unsubscribe(const int32_t block_id, const std::vector<std::string> & ops);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef notification_serviceClientT< ::apache::thrift::protocol::TProtocol> notification_serviceClient;

template <class Protocol_>
class notification_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<notification_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (notification_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (notification_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_subscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribe(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_unsubscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsubscribe(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  notification_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<notification_serviceIf> iface) :
    iface_(iface) {
    processMap_["subscribe"] = ProcessFunctions(
      &notification_serviceProcessorT::process_subscribe,
      &notification_serviceProcessorT::process_subscribe);
    processMap_["unsubscribe"] = ProcessFunctions(
      &notification_serviceProcessorT::process_unsubscribe,
      &notification_serviceProcessorT::process_unsubscribe);
  }

  virtual ~notification_serviceProcessorT() {}
};

typedef notification_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > notification_serviceProcessor;

template <class Protocol_>
class notification_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  notification_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< notification_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< notification_serviceIfFactory > handlerFactory_;
};

typedef notification_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > notification_serviceProcessorFactory;

class notification_serviceMultiface : virtual public notification_serviceIf {
 public:
  notification_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<notification_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~notification_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<notification_serviceIf> > ifaces_;
  notification_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<notification_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void subscribe(const int32_t block_id, const std::vector<std::string> & ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribe(block_id, ops);
    }
    ifaces_[i]->subscribe(block_id, ops);
  }

  void unsubscribe(const int32_t block_id, const std::vector<std::string> & ops) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsubscribe(block_id, ops);
    }
    ifaces_[i]->unsubscribe(block_id, ops);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class notification_serviceConcurrentClientT : virtual public notification_serviceIf {
 public:
  notification_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  notification_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  void subscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void send_subscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void unsubscribe(const int32_t block_id, const std::vector<std::string> & ops);
  void send_unsubscribe(const int32_t block_id, const std::vector<std::string> & ops);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef notification_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> notification_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "notification_service.tcc"
#include "notification_service_types.tcc"

#endif

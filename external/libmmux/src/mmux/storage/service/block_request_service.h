/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef block_request_service_H
#define block_request_service_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "block_service_types.h"

namespace mmux { namespace storage {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class block_request_serviceIf {
 public:
  virtual ~block_request_serviceIf() {}
  virtual int64_t get_client_id() = 0;
  virtual void register_client_id(const int32_t block_id, const int64_t client_id) = 0;
  virtual void command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments) = 0;
};

class block_request_serviceIfFactory {
 public:
  typedef block_request_serviceIf Handler;

  virtual ~block_request_serviceIfFactory() {}

  virtual block_request_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(block_request_serviceIf* /* handler */) = 0;
};

class block_request_serviceIfSingletonFactory : virtual public block_request_serviceIfFactory {
 public:
  block_request_serviceIfSingletonFactory(const ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf>& iface) : iface_(iface) {}
  virtual ~block_request_serviceIfSingletonFactory() {}

  virtual block_request_serviceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(block_request_serviceIf* /* handler */) {}

 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface_;
};

class block_request_serviceNull : virtual public block_request_serviceIf {
 public:
  virtual ~block_request_serviceNull() {}
  int64_t get_client_id() {
    int64_t _return = 0;
    return _return;
  }
  void register_client_id(const int32_t /* block_id */, const int64_t /* client_id */) {
    return;
  }
  void command_request(const sequence_id& /* seq */, const int32_t /* block_id */, const int32_t /* cmd_id */, const std::vector<std::string> & /* arguments */) {
    return;
  }
};


class block_request_service_get_client_id_args {
 public:

  block_request_service_get_client_id_args(const block_request_service_get_client_id_args&);
  block_request_service_get_client_id_args& operator=(const block_request_service_get_client_id_args&);
  block_request_service_get_client_id_args() {
  }

  virtual ~block_request_service_get_client_id_args() throw();

  bool operator == (const block_request_service_get_client_id_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const block_request_service_get_client_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_get_client_id_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_request_service_get_client_id_pargs {
 public:


  virtual ~block_request_service_get_client_id_pargs() throw();

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _block_request_service_get_client_id_result__isset {
  _block_request_service_get_client_id_result__isset() : success(false) {}
  bool success :1;
} _block_request_service_get_client_id_result__isset;

class block_request_service_get_client_id_result {
 public:

  block_request_service_get_client_id_result(const block_request_service_get_client_id_result&);
  block_request_service_get_client_id_result& operator=(const block_request_service_get_client_id_result&);
  block_request_service_get_client_id_result() : success(0) {
  }

  virtual ~block_request_service_get_client_id_result() throw();
  int64_t success;

  _block_request_service_get_client_id_result__isset __isset;

  void __set_success(const int64_t val);

  bool operator == (const block_request_service_get_client_id_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const block_request_service_get_client_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_get_client_id_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

typedef struct _block_request_service_get_client_id_presult__isset {
  _block_request_service_get_client_id_presult__isset() : success(false) {}
  bool success :1;
} _block_request_service_get_client_id_presult__isset;

class block_request_service_get_client_id_presult {
 public:


  virtual ~block_request_service_get_client_id_presult() throw();
  int64_t* success;

  _block_request_service_get_client_id_presult__isset __isset;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _block_request_service_register_client_id_args__isset {
  _block_request_service_register_client_id_args__isset() : block_id(false), client_id(false) {}
  bool block_id :1;
  bool client_id :1;
} _block_request_service_register_client_id_args__isset;

class block_request_service_register_client_id_args {
 public:

  block_request_service_register_client_id_args(const block_request_service_register_client_id_args&);
  block_request_service_register_client_id_args& operator=(const block_request_service_register_client_id_args&);
  block_request_service_register_client_id_args() : block_id(0), client_id(0) {
  }

  virtual ~block_request_service_register_client_id_args() throw();
  int32_t block_id;
  int64_t client_id;

  _block_request_service_register_client_id_args__isset __isset;

  void __set_block_id(const int32_t val);

  void __set_client_id(const int64_t val);

  bool operator == (const block_request_service_register_client_id_args & rhs) const
  {
    if (!(block_id == rhs.block_id))
      return false;
    if (!(client_id == rhs.client_id))
      return false;
    return true;
  }
  bool operator != (const block_request_service_register_client_id_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_register_client_id_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_request_service_register_client_id_pargs {
 public:


  virtual ~block_request_service_register_client_id_pargs() throw();
  const int32_t* block_id;
  const int64_t* client_id;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_request_service_register_client_id_result {
 public:

  block_request_service_register_client_id_result(const block_request_service_register_client_id_result&);
  block_request_service_register_client_id_result& operator=(const block_request_service_register_client_id_result&);
  block_request_service_register_client_id_result() {
  }

  virtual ~block_request_service_register_client_id_result() throw();

  bool operator == (const block_request_service_register_client_id_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const block_request_service_register_client_id_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_register_client_id_result & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_request_service_register_client_id_presult {
 public:


  virtual ~block_request_service_register_client_id_presult() throw();

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);

};

typedef struct _block_request_service_command_request_args__isset {
  _block_request_service_command_request_args__isset() : seq(false), block_id(false), cmd_id(false), arguments(false) {}
  bool seq :1;
  bool block_id :1;
  bool cmd_id :1;
  bool arguments :1;
} _block_request_service_command_request_args__isset;

class block_request_service_command_request_args {
 public:

  block_request_service_command_request_args(const block_request_service_command_request_args&);
  block_request_service_command_request_args& operator=(const block_request_service_command_request_args&);
  block_request_service_command_request_args() : block_id(0), cmd_id(0) {
  }

  virtual ~block_request_service_command_request_args() throw();
  sequence_id seq;
  int32_t block_id;
  int32_t cmd_id;
  std::vector<std::string>  arguments;

  _block_request_service_command_request_args__isset __isset;

  void __set_seq(const sequence_id& val);

  void __set_block_id(const int32_t val);

  void __set_cmd_id(const int32_t val);

  void __set_arguments(const std::vector<std::string> & val);

  bool operator == (const block_request_service_command_request_args & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(block_id == rhs.block_id))
      return false;
    if (!(cmd_id == rhs.cmd_id))
      return false;
    if (!(arguments == rhs.arguments))
      return false;
    return true;
  }
  bool operator != (const block_request_service_command_request_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const block_request_service_command_request_args & ) const;

  template <class Protocol_>
  uint32_t read(Protocol_* iprot);
  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};


class block_request_service_command_request_pargs {
 public:


  virtual ~block_request_service_command_request_pargs() throw();
  const sequence_id* seq;
  const int32_t* block_id;
  const int32_t* cmd_id;
  const std::vector<std::string> * arguments;

  template <class Protocol_>
  uint32_t write(Protocol_* oprot) const;

};

template <class Protocol_>
class block_request_serviceClientT : virtual public block_request_serviceIf {
 public:
  block_request_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  block_request_serviceClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  int64_t get_client_id();
  void send_get_client_id();
  int64_t recv_get_client_id();
  void register_client_id(const int32_t block_id, const int64_t client_id);
  void send_register_client_id(const int32_t block_id, const int64_t client_id);
  void recv_register_client_id();
  void command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments);
  void send_command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
};

typedef block_request_serviceClientT< ::apache::thrift::protocol::TProtocol> block_request_serviceClient;

template <class Protocol_>
class block_request_serviceProcessorT : public ::apache::thrift::TDispatchProcessorT<Protocol_> {
 protected:
  ::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
  virtual bool dispatchCallTemplated(Protocol_* iprot, Protocol_* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (block_request_serviceProcessorT::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef void (block_request_serviceProcessorT::*SpecializedProcessFunction)(int32_t, Protocol_*, Protocol_*, void*);
  struct ProcessFunctions {
    ProcessFunction generic;
    SpecializedProcessFunction specialized;
    ProcessFunctions(ProcessFunction g, SpecializedProcessFunction s) :
      generic(g),
      specialized(s) {}
    ProcessFunctions() : generic(NULL), specialized(NULL) {}
  };
  typedef std::map<std::string, ProcessFunctions> ProcessMap;
  ProcessMap processMap_;
  void process_get_client_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_get_client_id(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_register_client_id(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_register_client_id(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
  void process_command_request(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_command_request(int32_t seqid, Protocol_* iprot, Protocol_* oprot, void* callContext);
 public:
  block_request_serviceProcessorT(::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface) :
    iface_(iface) {
    processMap_["get_client_id"] = ProcessFunctions(
      &block_request_serviceProcessorT::process_get_client_id,
      &block_request_serviceProcessorT::process_get_client_id);
    processMap_["register_client_id"] = ProcessFunctions(
      &block_request_serviceProcessorT::process_register_client_id,
      &block_request_serviceProcessorT::process_register_client_id);
    processMap_["command_request"] = ProcessFunctions(
      &block_request_serviceProcessorT::process_command_request,
      &block_request_serviceProcessorT::process_command_request);
  }

  virtual ~block_request_serviceProcessorT() {}
};

typedef block_request_serviceProcessorT< ::apache::thrift::protocol::TDummyProtocol > block_request_serviceProcessor;

template <class Protocol_>
class block_request_serviceProcessorFactoryT : public ::apache::thrift::TProcessorFactory {
 public:
  block_request_serviceProcessorFactoryT(const ::apache::thrift::stdcxx::shared_ptr< block_request_serviceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::apache::thrift::stdcxx::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::apache::thrift::stdcxx::shared_ptr< block_request_serviceIfFactory > handlerFactory_;
};

typedef block_request_serviceProcessorFactoryT< ::apache::thrift::protocol::TDummyProtocol > block_request_serviceProcessorFactory;

class block_request_serviceMultiface : virtual public block_request_serviceIf {
 public:
  block_request_serviceMultiface(std::vector<apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~block_request_serviceMultiface() {}
 protected:
  std::vector<apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> > ifaces_;
  block_request_serviceMultiface() {}
  void add(::apache::thrift::stdcxx::shared_ptr<block_request_serviceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  int64_t get_client_id() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->get_client_id();
    }
    return ifaces_[i]->get_client_id();
  }

  void register_client_id(const int32_t block_id, const int64_t client_id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->register_client_id(block_id, client_id);
    }
    ifaces_[i]->register_client_id(block_id, client_id);
  }

  void command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->command_request(seq, block_id, cmd_id, arguments);
    }
    ifaces_[i]->command_request(seq, block_id, cmd_id, arguments);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
template <class Protocol_>
class block_request_serviceConcurrentClientT : virtual public block_request_serviceIf {
 public:
  block_request_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
    setProtocolT(prot);
  }
  block_request_serviceConcurrentClientT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    setProtocolT(iprot,oprot);
  }
 private:
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> prot) {
  setProtocolT(prot,prot);
  }
  void setProtocolT(apache::thrift::stdcxx::shared_ptr< Protocol_> iprot, apache::thrift::stdcxx::shared_ptr< Protocol_> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return this->piprot_;
  }
  apache::thrift::stdcxx::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return this->poprot_;
  }
  int64_t get_client_id();
  int32_t send_get_client_id();
  int64_t recv_get_client_id(const int32_t seqid);
  void register_client_id(const int32_t block_id, const int64_t client_id);
  int32_t send_register_client_id(const int32_t block_id, const int64_t client_id);
  void recv_register_client_id(const int32_t seqid);
  void command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments);
  void send_command_request(const sequence_id& seq, const int32_t block_id, const int32_t cmd_id, const std::vector<std::string> & arguments);
 protected:
  apache::thrift::stdcxx::shared_ptr< Protocol_> piprot_;
  apache::thrift::stdcxx::shared_ptr< Protocol_> poprot_;
  Protocol_* iprot_;
  Protocol_* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

typedef block_request_serviceConcurrentClientT< ::apache::thrift::protocol::TProtocol> block_request_serviceConcurrentClient;

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}} // namespace

#include "block_request_service.tcc"
#include "block_service_types.tcc"

#endif
